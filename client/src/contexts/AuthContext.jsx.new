import React, { useState, useEffect, useContext } from "react";
import { supabase } from "../lib/supabase";
import { authService } from "../services/authService";
import { AuthContext } from "./auth-context";

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [session, setSession] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [loading, setLoading] = useState(true);

  const checkAdminStatus = async (userId) => {
    if (!userId) return false;
    
    try {
      const { data: profile, error } = await supabase
        .from("profiles")
        .select("role")
        .eq("id", userId)
        .single();

      if (error || !profile) {
        console.error("❌ Error checking admin status:", error?.message);
        return false;
      }

      return profile.role === "admin";
    } catch (err) {
      console.error("❌ Error checking admin status:", err);
      return false;
    }
  };

  useEffect(() => {
    let mounted = true;

    const initialize = async () => {
      try {
        const currentSession = await authService.getCurrentSession();
        const currentUser = currentSession?.user || null;
        
        if (mounted) {
          setSession(currentSession);
          setUser(currentUser);
          
          if (currentUser) {
            const adminStatus = await checkAdminStatus(currentUser.id);
            if (mounted) setIsAdmin(adminStatus);
          }
        }
      } catch (error) {
        console.error('Error initializing auth:', error);
      } finally {
        if (mounted) setLoading(false);
      }
    };

    const setupAuthListener = () => {
      const { data: { subscription } } = supabase.auth.onAuthStateChange(
        async (event, session) => {
          if (!mounted) return;
          
          const currentUser = session?.user || null;
          setSession(session);
          setUser(currentUser);
          
          if (currentUser) {
            const adminStatus = await checkAdminStatus(currentUser.id);
            if (mounted) setIsAdmin(adminStatus);
          } else {
            setIsAdmin(false);
          }
          
          setLoading(false);
        }
      );
      return subscription;
    };

    // Initialize and setup listener
    initialize();
    const subscription = setupAuthListener();

    // Cleanup function
    return () => {
      mounted = false;
      if (subscription) {
        subscription.unsubscribe();
      }
    };
  }, []); // Empty dependency array - only run on mount

  const value = {
    user,
    session,
    loading,
    isAdmin,
    isAuthenticated: !!user
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuthContext = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuthContext must be used within an AuthProvider");
  }
  return context;
};